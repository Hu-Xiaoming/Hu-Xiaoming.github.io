<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>多线程</title>
    <link href="/2021/04/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/04/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>　　以前在编写Python项目时，使用过threading包等多线程知识，但每次都是现查现用。在近期有关Webots的某个工程中，由于Webots中Robot（Nao）控制问题（似乎与多线程有关，虽然作者不知道如何解释，但是将每个动作创建为线程就能很好的解决该问题），导致Nao无法执行本人的一串动作指令，如“走-&gt;左转-&gt;走”，机器人具体表现不详，但肯定不是我们正常期盼的那样，先“走”，然后“左转”，然后再“走”。<br>　　本文将以上述工程的demo为例，讲述一下多线程的使用。</p><h2 id="1-概念先行"><a href="#1-概念先行" class="headerlink" title="1 概念先行"></a>1 概念先行</h2><h3 id="1-1-程序"><a href="#1-1-程序" class="headerlink" title="1.1 程序"></a>1.1 程序</h3><p>　　程序是一个指令序列，包括程序段（存储程序运行过程中的代码）和数据段（存储程序运行过程处理的数据）</p><h3 id="1-2-进程实体（进程映像）"><a href="#1-2-进程实体（进程映像）" class="headerlink" title="1.2 进程实体（进程映像）"></a>1.2 进程实体（进程映像）</h3><p>　　进程实体包括程序进程控制块（Process Control Block, PCB）、程序段、进程段。</p><h4 id="1-2-1-PCB"><a href="#1-2-1-PCB" class="headerlink" title="1.2.1 PCB"></a>1.2.1 PCB</h4><p>　　系统为运行的程序配置一个数据结构，叫做进程控制块。它用来存储进程的各种信息（如程序代码的存放位置）。<br>　　创建进程实质上式创建进程实体中的PCB；撤销进程实质上是撤销PCB。<strong>PCB是进程的存在的唯一标志！</strong></p><h3 id="1-3-进程："><a href="#1-3-进程：" class="headerlink" title="1.3 进程："></a>1.3 进程：</h3><p>　　下面三个定义取自王道考研《操作系统》，本人偏爱第三个，但它们都强调了进程的动态性（即进程是一个过程）。</p><ul><li>进程是程序的一次<strong>执行过程</strong>。</li><li>进程是一个程序及其数据在处理机上顺序执行时所<strong>发生的活动</strong>。</li><li>进程是具有独立功能的程序在数据集合上<strong>运行的过程</strong>，它是系统进行资源分配和调度的一个独立单位。<h4 id="1-3-1-为什么引入进程实体和进程？"><a href="#1-3-1-为什么引入进程实体和进程？" class="headerlink" title="1.3.1 为什么引入进程实体和进程？"></a>1.3.1 为什么引入进程实体和进程？</h4>　　在单道机处理系统中，计算机只能处理一道程序，该程序独占计算机（包含IO等其他资源）。而在引入多道程序技术后，计算机需要考虑如何分配资源，为了方便操作系统管理，因此引入了进程实体和进程两个概念。　<h4 id="1-3-2-进程与进程实体的区别"><a href="#1-3-2-进程与进程实体的区别" class="headerlink" title="1.3.2 进程与进程实体的区别"></a>1.3.2 进程与进程实体的区别</h4></li><li>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</li><li>进程和进程实体并不一样，进程是动态的，进程实体是静态的。</li><li>如果不要求严谨，也可以认为进程实体就是进程。<h3 id="1-4-线程："><a href="#1-4-线程：" class="headerlink" title="1.4 线程："></a>1.4 线程：</h3>　　线程是轻量级进程。<h4 id="1-4-1-为什么引入线程？"><a href="#1-4-1-为什么引入线程？" class="headerlink" title="1.4.1 为什么引入线程？"></a>1.4.1 为什么引入线程？</h4>　　有的进程需要同时处理很多事情，而传统进程只能串行的执行一系列程序，为此，引入线程来提高<strong>并发度</strong>。<br>　　引入线程后，线程成为程序执行流的最小单位<h2 id="2-threading库"><a href="#2-threading库" class="headerlink" title="2 threading库"></a>2 threading库</h2><h3 id="2-1-利用Thread类创建线程"><a href="#2-1-利用Thread类创建线程" class="headerlink" title="2.1 利用Thread类创建线程"></a>2.1 利用Thread类创建线程</h3>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># author: HuXiaoming</span><br><span class="hljs-comment"># date: 2021-4-9</span><br><span class="hljs-comment"># using:</span><br><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">startMove</span>(<span class="hljs-params">action: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">10</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在执行&quot;</span> + action + <span class="hljs-string">&quot;动作，进度为&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;%&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createThread</span>() -&gt; <span class="hljs-literal">None</span>:</span><br>    <span class="hljs-comment"># walk_ 用来与walk做区分</span><br>    actions = [<span class="hljs-string">&quot;walk&quot;</span>, <span class="hljs-string">&quot;turn left&quot;</span>, <span class="hljs-string">&quot;walk_&quot;</span>]<br><br>    <span class="hljs-comment"># 创建三个动作线程</span><br>    thread1 = Thread(target=startMove, args=(actions[<span class="hljs-number">0</span>], ))<br>    thread2 = Thread(target=startMove, args=(actions[<span class="hljs-number">1</span>], ))<br>    thread3 = Thread(target=startMove, args=(actions[<span class="hljs-number">2</span>], ))<br><br>    <span class="hljs-comment"># 调用start()函数，新的线程才创建成功，并开始执行入口函数 startMove 里面的代码。</span><br>    thread1.start()<br>    thread2.start()<br>    thread3.start()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    createThread()<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2021/04/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B/result1.png"></p><p><strong>可见walk动作在执行到进度70%的时候被turn left动作抢占。</strong></p><p>如果想让执行顺序为”walk -&gt; turn left -&gt; walk_“，需要使用Lock进行互斥访问，见<a href="#%E4%BA%92%E6%96%A5%E9%94%81">2.3</a>章。</p><h3 id="2-2-Thread类的封装"><a href="#2-2-Thread类的封装" class="headerlink" title="2.2 Thread类的封装"></a>2.2 Thread类的封装</h3><h3 id="2-3-互斥锁"><a href="#2-3-互斥锁" class="headerlink" title="2.3 互斥锁"></a>2.3 互斥锁</h3><h2 id="3-queue库"><a href="#3-queue库" class="headerlink" title="3 queue库"></a>3 queue库</h2><h2 id="4-队列与线程的结合"><a href="#4-队列与线程的结合" class="headerlink" title="4 队列与线程的结合"></a>4 队列与线程的结合</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>王道考研《操作系统》</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第17章 贪婪算法</title>
    <link href="/2021/04/06/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
    <url>/2021/04/06/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="第17章-贪婪算法"><a href="#第17章-贪婪算法" class="headerlink" title="第17章 贪婪算法"></a>第17章 贪婪算法</h1><h2 id="1-概念先行"><a href="#1-概念先行" class="headerlink" title="1 概念先行"></a>1 概念先行</h2><ol><li>最优化问题：包含限制条件和优化函数</li><li><strong>可行解</strong>：符合限制条件的问题求解方案</li><li>最优解：使优化函数可能取得最佳值的可行解</li></ol><h2 id="2-应用"><a href="#2-应用" class="headerlink" title="2 应用"></a>2 应用</h2><h3 id="2-1-渴婴问题-例17-1"><a href="#2-1-渴婴问题-例17-1" class="headerlink" title="2.1 渴婴问题[例17-1]"></a>2.1 渴婴问题[例17-1]</h3><h3 id="2-2-装载问题-例17-2"><a href="#2-2-装载问题-例17-2" class="headerlink" title="2.2 装载问题[例17-2]"></a>2.2 装载问题[例17-2]</h3><h3 id="2-3-最小成本通信网络-例17-3"><a href="#2-3-最小成本通信网络-例17-3" class="headerlink" title="2.3 最小成本通信网络[例17-3]"></a>2.3 最小成本通信网络[例17-3]</h3><h3 id="2-4-找零钱-例17-4"><a href="#2-4-找零钱-例17-4" class="headerlink" title="2.4 找零钱[例17-4]"></a>2.4 找零钱[例17-4]</h3><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p>小孩用1美元来买价值不足1美元的糖果，售货员希望用最少的硬币来找钱。硬币有25美分、10美分、5美分及1美分的硬币，而且数目不限。售货员每次选择一枚硬币，凑成要找的零钱。选择时采用贪心准则（<strong>本题是最能体现贪心思想的，为了给顾客数量最少的硬币，我们先选用大面值的硬币，然后次一点，然后再次一点的，直到完成找零任务</strong>）。直到凑成的零钱总数等于要找的零钱数。</p><h4 id="证明-练习17-1-："><a href="#证明-练习17-1-：" class="headerlink" title="证明[练习17-1]："></a>证明[练习17-1]：</h4><p>售货员只要有足够的硬币，使用找零问题的贪心算法，总能凑出硬币最少的零钱。<br>证明（假设法）：</p><ul><li>采用贪心算法得到的方案为用$[n_1, n_2, n_3, n_4]$个[25美分, 10美分, 5美分, 1美分]来找零，假设该方案不是最优解；</li><li>用2个10美分和1个五美分来代替1个25美分，方案变为$[n_1-1, n_2+2, n_3+1, n_4]$；</li><li>显然新方案中的硬币数变多了（如果其他面值小于25美分的来代替一个25美分，硬币增加的数量会更多）；</li><li>所以原方案为最优解，假设不成立。</li></ul>]]></content>
    
    
    <categories>
      
      <category>《数据结构、算法与应用 C++描述》</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一章 C++回顾</title>
    <link href="/2021/04/04/C,C++%E5%9B%9E%E9%A1%BE/"/>
    <url>/2021/04/04/C,C++%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-7-递归函数"><a href="#1-7-递归函数" class="headerlink" title="1.7 递归函数"></a>1.7 递归函数</h1><p>练习 19 - 26</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span> <span class="hljs-comment">// pow(double base, double exp)</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 《数据结构，算法与应用》中递归的相应题目</span><br><span class="hljs-comment">// 第一章17-26</span><br><span class="hljs-comment">// P28 ~ P30</span><br><br><span class="hljs-comment">// 19. n！</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate_factorial_of_n_with_non_recursive_program</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 0 的阶乘是 1</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 负数没有阶乘</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Negative numbers have no factorials!&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> factorial_result = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// n! = n x (n-1) x (n-2) x ... x 1</span><br>        <span class="hljs-keyword">while</span>(n &gt; <span class="hljs-number">1</span>)<br>        &#123;<br>            factorial_result *= n;<br>            n -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> factorial_result;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate_factorial_of_n_with_recursive_program</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// f(n) = &#123; 1, if n = 1</span><br><span class="hljs-comment">//            n * f(n-1), else</span><br><span class="hljs-comment">//          &#125;</span><br>    <span class="hljs-comment">// 0 的阶乘是 1</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 基础部分</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 负数没有阶乘</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Negative numbers have no factorials!&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 递归部分</span><br>    <span class="hljs-comment">// n! = n x (n-1) x (n-2) x ... x 1</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> n * <span class="hljs-built_in">calculate_factorial_of_n_with_recursive_program</span>(n<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-comment">// 测试19</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_calculate_factorial</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-built_in">calculate_factorial_of_n_with_non_recursive_program</span>(n);<br>        cout &lt;&lt; <span class="hljs-string">&quot;With non-recursive program, factorial of n = &quot;</span>;<br>        cout &lt;&lt; result;<br>    &#125;<br>    <span class="hljs-comment">// 捕获 n 为负数的异常</span><br>    <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* e)<br>    &#123;<br>        cout &lt;&lt; e;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-built_in">calculate_factorial_of_n_with_recursive_program</span>(n);<br>        cout &lt;&lt; <span class="hljs-string">&quot;With recursive program, factorial of n = &quot;</span>;<br>        cout &lt;&lt; result;<br>    &#125;<br>    <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* e)<br>    &#123;<br>        cout &lt;&lt; e;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// ============================================================================================ //</span><br><br><span class="hljs-comment">// 20. 斐波那契数列（Fibonacci sequence）</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate_Fibonacci_with_recursive_funcation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">calculate_Fibonacci_with_recursive_funcation</span>(n<span class="hljs-number">-1</span>) + <span class="hljs-built_in">calculate_Fibonacci_with_recursive_funcation</span>(n<span class="hljs-number">-2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate_Fibonacci_with_non_recursive_funcation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n+<span class="hljs-number">1</span>];<br>    a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; a[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++)<br>        a[i] = a[i<span class="hljs-number">-1</span>] + a[i<span class="hljs-number">-2</span>];<br>    <span class="hljs-keyword">return</span> a[n];<br>&#125;<br><br><span class="hljs-comment">// 测试20</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_calculate_Fibonacci</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">7</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;With recursive funcation, Fibonacci sequence F(&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;) = &quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">calculate_Fibonacci_with_recursive_funcation</span>(n);<br>    cout &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;With non-recursive funcation, Fibonacci sequence F(&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;) = &quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">calculate_Fibonacci_with_non_recursive_funcation</span>(n);<br>    cout &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-comment">// ============================================================================================ //</span><br><br><span class="hljs-comment">// 21.</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate_f_n_with_recursive_funcation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<span class="hljs-comment">// 偶数</span><br>        <span class="hljs-keyword">return</span> n / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">calculate_f_n_with_recursive_funcation</span>(<span class="hljs-number">3</span>*n+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">calculate_f_n_with_non_recursive_funcation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<span class="hljs-comment">// 偶数</span><br>        <span class="hljs-keyword">return</span> n / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span><span class="hljs-comment">// 奇数，则 3n+1 定为偶数</span><br>        <span class="hljs-built_in"><span class="hljs-keyword">return</span></span>  (<span class="hljs-number">3</span> * n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// 测试21</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_f_n</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">4</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;With recursive funcation, f(&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;) = &quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">calculate_f_n_with_recursive_funcation</span>(n);<br>    cout &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;With non-recursive funcation, f(&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;) = &quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">calculate_f_n_with_non_recursive_funcation</span>(n);<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// ============================================================================================ //</span><br><br><span class="hljs-comment">// 22. 阿克曼函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate_Ackermann_funcation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || j &lt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span> &amp;&amp; j &gt;= <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(<span class="hljs-number">2.0</span>, j);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">2</span> &amp;&amp; j == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">calculate_Ackermann_funcation</span>(i<span class="hljs-number">-1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">calculate_Ackermann_funcation</span>(i<span class="hljs-number">-1</span>, <span class="hljs-built_in">calculate_Ackermann_funcation</span>(i, j<span class="hljs-number">-1</span>));<br>&#125;<br><br><span class="hljs-comment">// 测试22</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_Ackermann_funcation</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">2</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Ackermann`s funcation(&quot;</span>  &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot;) = &quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">calculate_Ackermann_funcation</span>(i, j);<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// ============================================================================================ //</span><br><br><span class="hljs-comment">// 23. 最大公约数（Greatest Common Divisor，GCD）</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate_GCD_with_recursive_funcation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (y == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">calculate_GCD_with_recursive_funcation</span>(y, x%y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate_GCD_with_non_recursive_funcation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; y) <span class="hljs-comment">// 保证 x &gt; y</span><br>        <span class="hljs-built_in">swap</span>(x, y);<br><br>    <span class="hljs-keyword">while</span>(y != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> temp = x % y;<br>        x = y;<br>        y = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">// 测试23</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_GCD</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">18</span>, y = <span class="hljs-number">24</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;With recursive funcation, GCD(&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;) = &quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">calculate_GCD_with_recursive_funcation</span>(x, y);<br>    cout &lt;&lt; endl;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;With non-recursive funcation, GCD(&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;) = &quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">calculate_GCD_with_non_recursive_funcation</span>(x, y);<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// ============================================================================================ //</span><br><br><span class="hljs-comment">// 24.</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">search_for_x_in_array_a</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T a[], <span class="hljs-keyword">const</span> T x, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (start &gt; end)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> middle = <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>((start + end) / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(a[middle] == x)<br>            <span class="hljs-keyword">return</span> middle;<br>        <span class="hljs-comment">// cout &lt;&lt; middle &lt;&lt; endl;</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> index = <span class="hljs-built_in">search_for_x_in_array_a</span>(a, x, start, middle<span class="hljs-number">-1</span>);<br>            <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; middle &lt;&lt; endl;</span><br>            <span class="hljs-keyword">if</span> (index == <span class="hljs-number">-1</span>) <span class="hljs-comment">// 关键</span><br>                <span class="hljs-built_in">search_for_x_in_array_a</span>(a, x, middle+<span class="hljs-number">1</span>, end);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试24</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_search_x</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">45</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-keyword">int</span> a_x = <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//int a_x = 10;</span><br><br>    <span class="hljs-keyword">char</span> b[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>&#125;;<br>    <span class="hljs-keyword">char</span> b_x = <span class="hljs-string">&#x27;w&#x27;</span>;<br>    <span class="hljs-comment">//char b_x = &#x27;e&#x27;;</span><br>    cout &lt;&lt; a_x &lt;&lt; <span class="hljs-string">&quot;在数组a中的下标为：&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">search_for_x_in_array_a</span>(a, a_x, <span class="hljs-number">0</span>, <span class="hljs-number">6</span><span class="hljs-number">-1</span>);<br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; b_x &lt;&lt; <span class="hljs-string">&quot;在数组b中的下标为：&quot;</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">search_for_x_in_array_a</span>(b, b_x, <span class="hljs-number">0</span>, <span class="hljs-number">6</span><span class="hljs-number">-1</span>);<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// ============================================================================================ //</span><br><br><span class="hljs-comment">// 25. 子集生成方法</span><br><span class="hljs-keyword">int</span> sequence[<span class="hljs-number">10000</span>][<span class="hljs-number">10000</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">subset_generation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>    &#123;<span class="hljs-comment">// 空集的子集只有空集</span><br>        cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1</span>; i ++)<br>            sequence[i][<span class="hljs-number">1</span>] = i;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> row_length = <span class="hljs-built_in">subset_generation</span>(n<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">int</span> cur_row_length = <span class="hljs-number">2</span> * row_length;<br>        <span class="hljs-comment">// 拷贝两遍 n-1 个元素的信息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = row_length; row &lt; cur_row_length; row ++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> col = <span class="hljs-number">1</span>; col &lt;= n<span class="hljs-number">-1</span>; col ++)<br>                    sequence[row][col] = sequence[row-row_length][col];<br>        <span class="hljs-comment">// 添加第 n 个元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = <span class="hljs-number">0</span>; row &lt; cur_row_length; row ++)<br>            sequence[row][n] = row &lt; row_length? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> cur_row_length;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subset_generation_with_non_recursive_funcation</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">// 转二进制</span><br>    <span class="hljs-keyword">int</span> subset[n] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-comment">// n 位二进制转其能表示的最大十进制</span><br>    <span class="hljs-keyword">int</span> number = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n<span class="hljs-number">-1</span>; i &gt; <span class="hljs-number">0</span>; i --)<br>        number += <span class="hljs-built_in">pow</span>(<span class="hljs-number">2.0</span>, i);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= number; i ++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> temp_n = n;<br>        <span class="hljs-keyword">int</span> temp_i = i;<br>        <span class="hljs-keyword">while</span>(temp_i &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            subset[temp_n<span class="hljs-number">-1</span>] = temp_i % <span class="hljs-number">2</span>;<br>            temp_i /= <span class="hljs-number">2</span>;<br>            temp_n --;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++)<br>            cout &lt;&lt; subset[j];<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 测试25</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_subset_generation</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// n must lower than seven</span><br>    <span class="hljs-comment">// int n = 10;</span><br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">time_t</span> start_time = <span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// cout &lt;&lt; start_time &lt;&lt; endl;</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;all subsets are:&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-built_in">subset_generation</span>(n);<br>    <span class="hljs-keyword">if</span> (length &lt;= <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i ++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            cout &lt;&lt; sequence[i][j];<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">time_t</span> end_time = <span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>);<br>    cout &lt;&lt; end_time - start_time &lt;&lt; endl;<br>    start_time = <span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;with non-recursive_way, all subsets are:&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">subset_generation_with_non_recursive_funcation</span>(n);<br>    end_time = <span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>);<br>    cout &lt;&lt; end_time - start_time &lt;&lt; endl;<br>    <span class="hljs-comment">// 经测试，递归快一点</span><br><br>&#125;<br><br><br><span class="hljs-comment">// ============================================================================================ //</span><br><br><span class="hljs-comment">// 26.格雷码（Gray Code）</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_Gray_code_of_n</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">print_Gray_code_of_n</span>(n<span class="hljs-number">-1</span>);<br>        cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">print_Gray_code_of_n</span>(n<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试26</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_gray_code</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">3</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Gray Code is：&quot;</span>;<br>    <span class="hljs-built_in">print_Gray_code_of_n</span>(n);<br>&#125;<br><br><br><span class="hljs-comment">// ============================================================================================ //</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 测试19</span><br>    <span class="hljs-built_in">test_calculate_factorial</span>();<br><br>    <span class="hljs-comment">// 测试20</span><br>    <span class="hljs-built_in">test_calculate_Fibonacci</span>();<br><br>    <span class="hljs-comment">// 测试21</span><br>    <span class="hljs-built_in">test_f_n</span>();<br><br>    <span class="hljs-comment">// 测试22</span><br>    <span class="hljs-built_in">test_Ackermann_funcation</span>();<br><br>    <span class="hljs-comment">// cout &lt;&lt; 18 % 24&lt;&lt; endl;</span><br>    <span class="hljs-comment">// 18</span><br>    <span class="hljs-comment">// 测试23</span><br>    <span class="hljs-built_in">test_GCD</span>();<br><br>    <span class="hljs-comment">// 测试24</span><br>    <span class="hljs-built_in">test_search_x</span>();<br><br>    <span class="hljs-comment">// 测试25</span><br>    <span class="hljs-built_in">test_subset_generation</span>();<br><br>    <span class="hljs-comment">// 测试26</span><br>    <span class="hljs-built_in">test_gray_code</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="24"><li>编写一个递归模板函数，确定元素x是否属于数组a[0: n-1]。</li></ol><p>　　我编写的是一个查找无序数组的递归版折半查找法（尽管折半查找不支持无序？）</p><p>　　search函数在a中查找x的步骤如下图所示</p><p><img src="/2021/04/04/C,C++%E5%9B%9E%E9%A1%BE/%E9%80%92%E5%BD%92.jpg"></p><p>　　遇到的问题：</p><p>　　一开始没有第236行（黄色标记行），导致查找结果一直为-1。</p><p>　　原因：</p><p>　　查找结束时，递归函数返回上一层，不会中断（跳出所有的递归层）。又因为没有225行的if语句判断，故当前层的递归函数向下继续运行。</p><p>　　解决办法：</p><p>　　在236行加上if判断</p><ol start="25"><li>[子集生成方法（Subset Generation）]编写一个C++递归函数，输出n个元素的所有子集。例如，三元素集{a,b,c}的子集是{}（空集）,{a},{b},{c},{a,b},{a,c},{b,c},{a,b,c}。这些子集用0/1组成的代码序列来表示分别是000,100,010,001,110,101,011,111(0表示相应的元素不在子集中，1表示相应的元素在子集中)。因此你的程序输出长度为n的0/1序列即可。</li></ol><p>　　子集生成法的实质：n位二进制的种数。</p><p>　　（1）递归法</p><p>　　　　当 n = 0 时，即该 n 元素集为空集， 空集的子集只有一个空集，故输出为 0。</p><p>　　　　当 n = 1 时，即 1 元素集，比如{ a }，它有两个子集{ }， { a }， 故输出为 0、1。</p><p>　　　　当 n = 2 时，即 2 元素集，比如{ a, b }，它有四个子集{ }， { a }，{ b }，{ a，b}，故输出为 00、10、 01、 11。</p><p>　　　　…………</p><p>　　　　下面我们用表格来表示一下规律。</p><p>表1：n = 1</p><table><thead><tr><th align="center">0</th></tr></thead><tbody><tr><td align="center">1</td></tr></tbody></table><p>如何由表 1 推到表 2：</p><p>​    第一步：将表 1 拷贝两遍，形成表 2 的A区域</p><p>​    第二步：将第二个元素的两种取值（0,1）插入表 2， 如表 2 B区域所示。</p><p>表2：n = 2</p><table><thead><tr><th>A</th><th>B</th></tr></thead><tbody><tr><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td></tr></tbody></table><p>表 2 推表 3 的步骤与表 1 推表 2 的步骤相同。</p><p>表3：n = 3</p><table><thead><tr><th>A</th><th>A</th><th>B</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>上述的表 1 到 表 3 是即为程序中的<a href>sequence</a>，它采用二维表格存储结果。</p><p>　　　　<a href="http://www.cnblogs.com/#T25.1">代码见</a></p><p>　　（2）二进制法</p><p>　　　　<a href="http://www.cnblogs.com/#T25.2">代码见</a></p><p>全部<a href="https://github.com/Hu-Xiaoming/Data-Structures/blob/master/recursive%20code/practiceOfRecursion_19-26.cpp">代码</a>见</p>]]></content>
    
    
    <categories>
      
      <category>《数据结构、算法与应用 C++描述》</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>其他资料</title>
    <link href="/2021/04/04/%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/"/>
    <url>/2021/04/04/%E5%85%B6%E4%BB%96%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<h1 id="1-书籍地址："><a href="#1-书籍地址：" class="headerlink" title="1 书籍地址："></a>1 书籍地址：</h1><ul><li>国学导航：<a href="http://www.guoxue123.com/index.htm">http://www.guoxue123.com/index.htm</a></li><li>地图：<a href="http://www.guoxue123.com/other/map/zgmap/index.htm?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=603304426711158784">http://www.guoxue123.com/other/map/zgmap/index.htm?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=603304426711158784</a></li><li>书格（古籍）： <a href="https://new.shuge.org/">https://new.shuge.org</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>资料</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绘画学习资料</title>
    <link href="/2021/04/04/%E7%BB%98%E7%94%BB%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <url>/2021/04/04/%E7%BB%98%E7%94%BB%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<h1 id="1-素材网站"><a href="#1-素材网站" class="headerlink" title="1 素材网站"></a>1 素材网站</h1><ul><li><a href="https://line-of-action.com/practice-tools/">https://line-of-action.com/practice-tools/</a></li><li>不移之火：<a href="https://www.byzhihuo.com/">https://www.byzhihuo.com</a></li></ul><h1 id="2-喜欢的画家"><a href="#2-喜欢的画家" class="headerlink" title="2 喜欢的画家"></a>2 喜欢的画家</h1><ul><li>意大利画师mauro belfiore：<a href="https://cn.bing.com/search?q=mauro+belfiore&amp;FORM=HDRSC1">https://cn.bing.com/search?q=mauro+belfiore&amp;FORM=HDRSC1</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>资料</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机学习资料</title>
    <link href="/2021/04/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <url>/2021/04/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<h1 id="1-语言篇"><a href="#1-语言篇" class="headerlink" title="1 语言篇"></a>1 语言篇</h1><h2 id="1-1-c"><a href="#1-1-c" class="headerlink" title="1.1 c++"></a>1.1 c++</h2><ul><li><a href="http://www.cplusplus.com/">http://www.cplusplus.com/</a></li><li>MFC：<a href="http://www.jizhuomi.com/software/257.html">http://www.jizhuomi.com/software/257.html</a></li></ul><h2 id="1-2-python"><a href="#1-2-python" class="headerlink" title="1.2 python"></a>1.2 python</h2><ul><li>python官方文档：<a href="https://docs.python.org/zh-cn/3.7/tutorial/index.html">https://docs.python.org/zh-cn/3.7/tutorial/index.html</a></li><li>Dive into python（深入python）：<a href="https://diveintopython3.net/">https://diveintopython3.net/</a></li><li><a href="http://www.python3.vip/">http://www.python3.vip/</a></li></ul><h1 id="2-算法"><a href="#2-算法" class="headerlink" title="2 算法"></a>2 算法</h1><ul><li>数据结构、算法与应用(c++)<a href="https://www.cise.ufl.edu/~sahni/dsaac/">https://www.cise.ufl.edu/~sahni/dsaac/</a></li></ul><h1 id="3-机器学习"><a href="#3-机器学习" class="headerlink" title="3 机器学习"></a>3 机器学习</h1><h2 id="3-1-机器学习"><a href="#3-1-机器学习" class="headerlink" title="3.1 机器学习"></a>3.1 机器学习</h2><ul><li><p>南瓜书：</p><p><a href="https://datawhalechina.github.io/pumpkin-book/#/">https://datawhalechina.github.io/pumpkin-book/#/</a></p><ul><li>南瓜书是对西瓜书（周志华《机器学习》）中公式的详尽推导</li></ul></li><li><p>scikit-learn: <a href="https://scikit-learn.org/stable/">https://scikit-learn.org/stable/</a></p></li></ul><h2 id="3-2-强化学习"><a href="#3-2-强化学习" class="headerlink" title="3.2 强化学习"></a>3.2 强化学习</h2><ul><li><p>david silver：<a href="https://www.davidsilver.uk/teaching/">https://www.davidsilver.uk/teaching/</a></p></li><li><p>莫烦python：</p><p><a href="https://morvanzhou.github.io/">https://morvanzhou.github.io/</a></p><ul><li>也包含python、深度学习、实例、多进程等等。</li></ul></li></ul><h2 id="3-3-深度学习"><a href="#3-3-深度学习" class="headerlink" title="3.3 深度学习"></a>3.3 深度学习</h2><ul><li>动手学深度学习：<ul><li>文档：<a href="http://zh.gluon.ai/">http://zh.gluon.ai/</a></li><li>视频：<a href="https://www.bilibili.com/video/BV154411S7Tf?from=search&amp;seid=9397274944264794167">https://www.bilibili.com/video/BV154411S7Tf?from=search&amp;seid=9397274944264794167</a></li></ul></li></ul><h2 id="3-4-自然语言处理"><a href="#3-4-自然语言处理" class="headerlink" title="3.4 自然语言处理"></a>3.4 自然语言处理</h2><ul><li>HanLP：<ul><li>PyHanLP工具包使用指南：<a href="https://ningshixian.github.io/2019/11/13/PyHanLP%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">https://ningshixian.github.io/2019/11/13/PyHanLP%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</a></li></ul></li></ul><h2 id="3-5-人工智能"><a href="#3-5-人工智能" class="headerlink" title="3.5 人工智能"></a>3.5 人工智能</h2><ul><li>人工智能：<a href="https://www.captainai.net/st/">https://www.captainai.net/st/</a></li></ul><h1 id="4-操作系统"><a href="#4-操作系统" class="headerlink" title="4 操作系统"></a>4 操作系统</h1><h2 id="4-1-Linux"><a href="#4-1-Linux" class="headerlink" title="4.1 Linux"></a>4.1 Linux</h2><ul><li>鸟哥的Linux私房菜：<a href="http://linux.vbird.org/">http://linux.vbird.org/</a></li><li>Makefile<ul><li><a href="https://seisman.github.io/how-to-write-makefile/invoke.html">https://seisman.github.io/how-to-write-makefile/invoke.html</a></li></ul></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><ul><li><a href="http://www.songho.ca/math/index.html">http://www.songho.ca/math/index.html</a></li><li>wolfram mathworld（用于查询）：<a href="https://mathworld.wolfram.com/topics/">https://mathworld.wolfram.com/topics/</a></li></ul><h2 id="微软官方文档-包含c-，sql等等"><a href="#微软官方文档-包含c-，sql等等" class="headerlink" title="微软官方文档(包含c++，sql等等)"></a>微软官方文档(包含c++，sql等等)</h2><ul><li>MSDN：<a href="https://docs.microsoft.com/zh-cn/">https://docs.microsoft.com/zh-cn/</a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>代码高亮（菜鸟）：<a href="https://c.runoob.com/front-end/5536">https://c.runoob.com/front-end/5536</a></li><li>PDF转化：<a href="https://xpdf.net/pdf-to-word">https://xpdf.net/pdf-to-word</a></li><li>在线域名解析器：<a href="http://www.ip33.com/dns.html">http://www.ip33.com/dns.html</a></li><li>流程图：<a href="https://online.visual-paradigm.com/cn/diagrams/features/flowchart-tool/">https://online.visual-paradigm.com/cn/diagrams/features/flowchart-tool/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>资料</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>有限状态自动机</title>
    <link href="/2021/04/04/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <url>/2021/04/04/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="有限状态自动机"><a href="#有限状态自动机" class="headerlink" title="有限状态自动机"></a>有限状态自动机</h1>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
